
Status,
Model ID,
Owner,
<Expected>OOS Date,CAGR,MDD,Sortino,Calmar
<Data>Refresh Date
<Actual>CAGR,CAGR Rank,MDD,MDD Rank,Sortino,Sortino Rank,Calmar,Calmar Rank

Ranks apply to Activated and Candidate models
Retired category has no owner


Activated	ROC 13	Partner 3	2016-03-16	10.5%	17.5%	3.2	9.4	2016-11-12	12.5%	3	5.6%	1	7.0	1	32.2	1
Activated	RSI 44	Partner 2	2016-03-16	12.3%	22.3%	2.5	8.0	2016-11-12	15.6%	1	22.3%	7	2.5	6	9.3	5
Activated	CRVB 2	Partner 4	2016-03-16	11.8%	20.1%	2.1	8.7	2016-11-12	11.5%	4	18.6%	4	2.1	8	9.3	4
Activated	MAV 20	Partner 1	2016-03-16	11.3%	18.4%	2.7	9.3	2016-11-12	12.6%	2	13.5%	3	2.7	4	13.4	3
Candidate	ROC TS3	Partner 5	2016-03-16	10.5%	25.5%	1.8	6.5	2016-11-12	10.5%	6	25.5%	9	1.8	9	6.5	9


# > unique(ti.df$ie.tax_category)
# [1] "NOT_TAXABLE"             "QUALIFIED_DIVIDEND"      "LONG_TERM_CAPITAL_GAIN" 
# [4] "SHORT_TERM_CAPITAL_GAIN" "DIVIDEND"  

# > unique(ti.df$ie.type)
# [1] "INSTRUMENT_EXERCISE_BUY_OPTION"    "INSTRUMENT_BUY_COMMISSION"             
# [3] "INSTRUMENT_BUY"                    "INSTRUMENT_DISTRIBUTION_CASH"            
# [5] "INSTRUMENT_SELL"                   "INSTRUMENT_SELL_COMMISSION_AND_FEE"      
# [7] "INSTRUMENT_COVER_SHORT_SALE"       "INSTRUMENT_DISTRIBUTION_RETURN_OF_CAPITAL"

Algorithm

Read Bivio into transactions
Read scorecard models YAML
* identifies all current model file names
* identifies model status; active, candidate, retired
For each model file name
* read the individual file name YAML
* find the historical model performance statistics. static
* find the model start date from the scorecard
* find the tickers involved in the model
* make a list of the ticker XTS objects
* for each ticker XTS
    * trim the XTS to start at model start date
    * bind computed daily return column on adjusted close price
    * find all transactions for the ticker at or after the start date
    * initialize position column with NA
    * initialize applied daily return with 0
    * bind the position shares onto the price timeline as a column, last value carry forward
    * bind the transaction dollar amount onto the price timeline as a column
    * compute applied daily return, daily dollar amount
    * compute cumulative return, dollar amount
    * then what?  
* create a model XTS
    * bind adjusted close columns from all tickers 
    * bind daily return dollars from all tickers
    * initialize a total model daily return dollars column
    * compute cumulative return, dollar amount
    * compute running sortino ratio, calmar ratio
    * compute max drawdown
    * compute annualized return
    * compute total return
    * insert into scorecard
Emit the scorecard data table
